#!/bin/sh
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org/>

PACKAGE="mp"
VERSION="3.3.19w"
PACKAGE_URL=''

PROJECT_TYPE='c' # c / c++ 

APP_CFLAGS='-Wall -g -O2 -DHAVE_CONFIG_H'
APP_CXXFLAGS="${APP_CFLAGS}"
APP_CPPFLAGS=''
APP_LDFLAGS=''
APP_LIBS=''
EXTRA_GCC_WARNINGS=no # yes/no
GETTEXT_PACKAGE='minimum-profit'

cd $(dirname "$0") || exit 1

#==========================================================

PACKAGE_NAME="${PACKAGE}"
PACKAGE_STRING="${PACKAGE} ${VERSION}"
PACKAGE_TARNAME="${PACKAGE}"
PACKAGE_BUGREPORT="${PACKAGE_URL}"
PACKAGE_VERSION="${VERSION}"

#==========================================================
# ./configure release

if [ "$1" = "release" ] ; then
	git clean -dfx
	dir=${PACKAGE}-${VERSION}
	rm -rf ../${dir}
	mkdir -p ../${dir}
	cp -rf $(pwd)/* ../${dir}
	cd ..
	if tar -vJcf ${dir}.tar.xz $dir ; then
		echo
		echo "*** ${dir}.tar.xz has been created"
	fi
	exit
fi

# ./configure po
if [ "$1" =  "po" ] ; then
	export GETTEXT_PACKAGE
	./po/Makefile.in.gen po || exit 1
	#sed -i '/#~ /d' po/*.po
	exit 0
fi

# ./configure linguas
if [ "$1" =  "linguas" ] ; then
	./po/Makefile.in.gen
	exit $?
fi

#==========================================================

exit_error() {
	test "$1" && echo "$@"
	if [ -f Makefile ] ; then
		rm -f Makefile config.h
	fi
	exit 1
}

set_cc()
{
	printf "Checking for C compiler... "
	if test -n "$CC" ; then # environment
		if test -x $CC ; then
			echo "$CC"
			return
		fi
	fi
	#--
	for i in gcc clang cc
	do
		if command -v $i >/dev/null 2>&1 ; then
			CC=${i}
			echo "$CC"
			return
		fi
	done
	exit_error "$CC not found"
}

set_cxx()
{
	if test "$PROJECT_TYPE" = "c" ; then
		return # don't need a c++ compiler
	fi
	printf "Checking for C++ compiler... "
	if test -n "$CXX" ; then # environment
		if test -x $CXX ; then
			echo "$CXX"
			return
		fi
	fi
	#--
	for i in g++ clang++ c++
	do
		if command -v $i >/dev/null 2>&1 ; then
			CXX=${i}
			echo "$CXX"
			return
		fi
	done
	exit_error "$CXX not found"
}

run_pkg_config()
{
	pkgconfig='pkg-config'
	if test -n "$PKG_CONFIG" ; then
		pkgconfig="$PKG_CONFIG"
	fi
	${pkgconfig} "$@"
}


check_pkg() # $1=<pkg> $2=[min-version]
{
	# returns 0=ok, use pkg-config
	pc_pkg="$1"
	pc_pkg_min_ver="$2"
	if [ -n "$pc_pkg_min_ver" ] ; then
		printf "Checking for %s >= %s... " "$pc_pkg" "$pc_pkg_min_ver"
	else
		printf "Checking for %s... " "$pc_pkg"
	fi
	#--
	if [ -n "$pc_pkg_min_ver" ] ; then
		run_pkg_config ${pc_pkg} --atleast-version=${pc_pkg_min_ver} 2>/dev/null
	else
		run_pkg_config ${pc_pkg} 2>/dev/null
	fi
	xret=$?
	if [ $xret -eq 0 ] ; then
		echo "yes"
	else
		echo "no"
	fi
	return $xret
}

#==========================================================

#test "$CC"    || CC='gcc'
#test "$CXX"   || CXX='g++'
test "$STRIP"  || STRIP='strip'
test "$AR"     || AR='ar'
test "$AS"     || AS='as'
test "$RANLIB" || RANLIB='ranlib'
test "$OBJCOPY" || OBJCOPY='objcopy'
test "$OBJDUMP" || OBJDUMP='objdump'

prefix=/usr/local
exec_prefix='${prefix}'
libdir='${exec_prefix}/lib'
bindir='${exec_prefix}/bin'
sbindir='${exec_prefix}/sbin'
libexecdir='${exec_prefix}/libexec'
includedir='${prefix}/include'
oldincludedir=/usr/include
datarootdir='${prefix}/share'
datadir='${datarootdir}'
localstatedir='${prefix}/var'
sysconfdir='${prefix}/etc'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
htmldir='${docdir}'
pdfdir='${docdir}'
psdir='${docdir}'
infodir='${datarootdir}/info'
mandir='${datarootdir}/man'
localedir='${datarootdir}/locale'
runstatedir='${localstatedir}/run'
top_builddir="$(pwd)"
top_srcdir="$(pwd)"
builddir=.
srcdir=.
mkdir_p='mkdir -p'
MKDIR_P='mkdir -p'

#==========================================================

help() {
	echo "
Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [${prefix}]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [${exec_prefix}]

By default, 'make install' will install all the files in
'/usr/local/bin', '/usr/local/lib' etc.  You can specify
an installation prefix other than '/usr/local' using '--prefix',
for instance '--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [${bindir}]
  --sbindir=DIR           system admin executables [${sbindir}]
  --libexecdir=DIR        program executables [${libexecdir}]
  --sysconfdir=DIR        read-only single-machine data [${sysconfdir}]
  --localstatedir=DIR     modifiable single-machine data [${localstatedir}]
  --runstatedir=DIR       modifiable per-process data [${runstatedir}]
  --libdir=DIR            object code libraries [${libdir}]
  --includedir=DIR        C header files [${includedir}]
  --oldincludedir=DIR     C header files for non-gcc [${oldincludedir}]
  --datarootdir=DIR       read-only arch.-independent data root [${datarootdir}]
  --datadir=DIR           read-only architecture-independent data [${datadir}]
  --infodir=DIR           info documentation [${infodir}]
  --localedir=DIR         locale-dependent data [${localedir}]
  --mandir=DIR            man documentation [${mandir}]
  --docdir=DIR            documentation root [${docdir}]
  --htmldir=DIR           html documentation [${htmldir}]
  --dvidir=DIR            dvi documentation [${dvidir}]
  --pdfdir=DIR            pdf documentation [${pdfdir}]
  --psdir=DIR             ps documentation [${psdir}]
$(print_optional_features)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
$(print_extra_env_variables)

Use these variables to override the choices made by 'configure' or to help
it to find libraries and programs with nonstandard names/locations.
"
	exit
}

#==========================================================

print_optional_features() {
	printf ""
}

print_extra_env_variables() {
	printf ""
}

#==========================================================

getvalue() {
	echo $1 | cut -f 2 -d '='
}

for i in $@
do
	case $i in
		--host=*) host="$(getvalue $i)" ;;
		CFLAGS=*)   CFLAGS="$CFLAGS $(getvalue $i)"     ;;
		CPPFLAGS=*) CPPFLAGS="$CPPFLAGS $(getvalue $i)" ;;
		LDFLAGS=*)  LDFLAGS="$LDFLAGS $(getvalue $i)"   ;;
		CXXFLAGS=*) CXXFLAGS="$CXXFLAGS $(getvalue $i)"   ;;
		LIBS=*)  LIBS="$LDFLAGS $(getvalue $i)"   ;;
		CC=*)    CC="$(getvalue $i)"     ;;
		CXX=*)   CXX="$(getvalue $i)"    ;;
		STRIP=*) STRIP="$(getvalue $i)"  ;;
		AR=*)    AR="$(getvalue $i)"     ;;

		--prefix=*)     prefix="$(getvalue $i)"     ;;
		--exec_prefix=*) exec_prefix="$(getvalue $i)"     ;;
		--libdir=*)     libdir="$(getvalue $i)"     ;;
		--bindir=*)     bindir="$(getvalue $i)"     ;;
		--sbindir=*)    sbindir="$(getvalue $i)"    ;;
		--libexecdir=*) libexecdir="$(getvalue $i)" ;;
		--includedir=*) includedi="$(getvalue $i)"  ;;
		--oldincludedir=*)  oldincludedi="$(getvalue $i)" ;;
		--datarootdir=*)   datarootdir="$(getvalue $i)"   ;;
		--datadir=*)    datadir="$(getvalue $i)"          ;;
		--localstatedir=*) localstatedir="$(getvalue $i)" ;;
		--sysconfdir=*)    sysconfdir="$(getvalue $i)"    ;;
		--docdir=*)    docdir="$(getvalue $i)"   ;;
		--dvidir=*)    dvidir="$(getvalue $i)"   ;;
		--htmldir=*)   htmldir="$(getvalue $i)"  ;;
		--pdfdir=*)    pdfdir="$(getvalue $i)"   ;;
		--psdir=*)     psdir="$(getvalue $i)"    ;;
		--infodir=*)   infodir="$(getvalue $i)"  ;;
		--mandir=*)    mandir="$(getvalue $i)"   ;;
		--localedir=*)   localedir="$(getvalue $i)"   ;;
		--runstatedir=*) runstatedir="$(getvalue $i)" ;;

		-h|--help) help ;;
	esac
done

set_cc
set_cxx

if test "$EXTRA_GCC_WARNINGS" = "yes" ; then
	case "$CC" in gcc*)
		CPPFLAGS="$CPPFLAGS -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers" ;;
	esac
fi

if test -n "$host" ; then
	printf "Checking cross-compiler... "
	if test -f ${host}-${CC} || command -v ${host}-${CC} >/dev/null 2>&1 ; then
		CC=${host}-${CC}
		CXX=${host}-${CXX}
		LD=${host}-${LD}
		STRIP=${host}-${STRIP}
		AR=${host}-${AR}
		AS=${host}-${AS}
		RANLIB=${host}-${RANLIB}
		OBJCOPY=${host}-${OBJCOPY}
		OBJDUMP=${host}-${OBJDUMP}
		echo "$host"
	else
		exit_error "not found"
	fi
fi

#==========================================================
#    extra options
#==========================================================

print_make_extra_flags() {
	printf ""
}

#==========================================================
#    create makefiles
#==========================================================

CFLAGS="$CFLAGS $APP_CFLAGS"
CPPFLAGS="$CPPFLAGS $APP_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $APP_CXXFLAGS"
LDFLAGS="$LDFLAGS $APP_LDFLAGS"
LIBS="$LIBS $APP_LIBS"

makefiles=$(find . -name Makefile.in | sed -e 's%.in%%')

for makefile in ${makefiles}
do
	cat > ${makefile} <<EOF
# This is free and unencumbered software released into the public domain.
# For more information, please refer to <http://unlicense.org/>

CC = ${CC}
CXX = ${CXX}
STRIP = ${STRIP}
AR = ${AR}
AS = ${AS}
RANLIB = ${RANLIB}
OBJCOPY = ${OBJCOPY}
OBJDUMP = ${OBJDUMP}

CFLAGS = ${CFLAGS}
CPPFLAGS = ${CPPFLAGS}
CXXFLAGS = ${CXXFLAGS}
LDFLAGS = ${LDFLAGS}
LIBS = ${LIBS}
$(print_make_extra_flags)

#=================================================

prefix = ${prefix}
exec_prefix = ${exec_prefix}
libdir = ${libdir}
bindir = ${bindir}
sbindir = ${sbindir}
libexecdir = ${libexecdir}
includedir = ${includedir}
oldincludedir = ${oldincludedir}
datarootdir = ${datarootdir}
datadir = ${datadir}
localstatedir = ${localstatedir}
sysconfdir = ${sysconfdir}
docdir = ${docdir}
dvidir = ${dvidir}
htmldir = ${htmldir}
pdfdir = ${pdfdir}
psdir = ${psdir}
infodir = ${infodir}
mandir = ${mandir}
localedir = ${localedir}
runstatedir = ${runstatedir}
top_builddir = ${top_builddir}
top_srcdir = ${top_srcdir}
builddir = ${builddir}
srcdir = ${srcdir}
mkdir_p = ${mkdir_p}
MKDIR_P = ${MKDIR_P}

#=================================================

EOF
	cat ${makefile}.in >> ${makefile}
done

#==========#
# config.h #
#==========#

cat > config.h <<EOF
#define PACKAGE "${PACKAGE}"
#define VERSION "${VERSION}"
#define PACKAGE_URL "${PACKAGE_URL}"
#define PACKAGE_NAME "${PACKAGE_NAME}"
#define PACKAGE_STRING "${PACKAGE_STRING}"
#define PACKAGE_TARNAME "${PACKAGE_TARNAME}"
#define PACKAGE_BUGREPORT "${PACKAGE_BUGREPORT}"
#define PACKAGE_VERSION "${PACKAGE_VERSION}"
EOF

echo
echo "* Now run 'make'  (or 'make clean' first if the app is already compiled)"
echo
